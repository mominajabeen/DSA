class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        unordered_map<int, int> memo;
        int minCoin = dfs(coins, amount, memo);
        return minCoin == INT_MAX? -1: minCoin;
    }
private:
    int dfs(vector<int>& coins, int amount, unordered_map<int, int>& memo){
        if(amount == 0) return 0;
        if(memo.find(amount) != memo.end())     return memo[amount];

        int res = INT_MAX;
        for(int coin:coins){
            if(amount - coin >= 0){
                int result= dfs(coins, amount - coin, memo);
                if(result != INT_MAX)
                    res = min(res, 1 + result);
            }
        }
        memo[amount] = res;
        return res;
        
    }
};
