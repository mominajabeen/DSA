/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int treeDiameter = 0;
        calculateHeight(root, treeDiameter);
        return treeDiameter;
    }
private:
    static int calculateHeight(TreeNode* currNode, int& treeDiameter){
        if(currNode == nullptr)   return 0;

        int leftHeight  = calculateHeight(currNode->left, treeDiameter);
        int rightHeight = calculateHeight(currNode->right, treeDiameter);

        int diameter = leftHeight + rightHeight;
        treeDiameter = max(diameter, treeDiameter);

        return max(leftHeight, rightHeight) + 1;
    }
};
