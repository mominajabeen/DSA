class Solution {
public:
    int longestStrChain(vector<string>& words) {
        unordered_set<string> wordsPresent;
        unordered_map<string, int> memo;
        for(const string& word: words){
            wordsPresent.insert(word);
        }
        int ans = 0;
        for(const string& word:words){
            ans = max(ans, dfs(memo, wordsPresent, word));
        }
        return ans;
    }
private:
    int dfs(unordered_map<string, int>& memo, unordered_set<string>& wordsPresent, string currWord){
        if(memo.find(currWord) != memo.end())  return memo[currWord];

        // this stores max length sequence of the current word
        int maxLength = 1;

        for(int i = 0; i < currWord.length(); i++){
            string newWord = currWord.substr(0, i) + currWord.substr(i+1);
            if(wordsPresent.find(newWord) != wordsPresent.end()){
                int currLength = 1 + dfs(memo, wordsPresent, newWord);
                maxLength = max(currLength, maxLength);
            }
        }
        memo[currWord] = maxLength;

        return maxLength;
    }
};
