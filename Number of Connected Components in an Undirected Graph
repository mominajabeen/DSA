class Solution {
public:
    int countComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adj(n);
        for(const auto& edge:edges){
            adj[edge[0]].push_back(edge[1]);
            adj[edge[1]].push_back(edge[0]);
        }
        vector<bool> visit(n, false);
        
        int res = 0;
        for(int node = 0;  node < n; node++){
            if(!visit[node]){
                dfs(node, adj, visit);
                res++;
            }
        }
        return res;
    }
private:
    void dfs(int node, const vector<vector<int>>& adj, vector<bool>& visit){
        visit[node] = true;

        for(int nei:adj[node]){
            if(!visit[nei]){
                dfs(nei, adj, visit);
            }
        }

    }
};
