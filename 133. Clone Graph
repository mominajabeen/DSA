/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if(node == nullptr) return nullptr;
        map<Node*, Node*> oldToNew;
        return clone(node, oldToNew);

    }
    Node* clone(Node*& node, map<Node*, Node*>& oldToNew){
        if(oldToNew.count(node))    return oldToNew[node];

        Node* copy = new Node(node->val);
        oldToNew[node] = copy;

        for(Node* n : node->neighbors){
            copy->neighbors.push_back(clone(n, oldToNew));
        }
        return copy;
    }
};
