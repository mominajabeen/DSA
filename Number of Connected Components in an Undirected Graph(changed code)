class UnionFind{
public:
    vector<int> parent;
    vector<int> rank;

        UnionFind(int n) {
            parent.resize(n);
            rank.resize(n, 1);
            for(int i = 0; i < n; i++){
                parent[i] = i;
            }
        }
        int find(int x){
            if(x != parent[x])      parent[x] = find(parent[x]);
            return parent[x];
        }
        bool unite(int x, int y){
            int rootX = find(x);
            int rootY = find(y);
            if(rootX == rootY)  return false;

            if(rank[rootX] < rank[rootY]){
                parent[rootX] = rootY;
                rank[rootY]++;
            }
            else if(rank[rootX] > rank[rootY]){
                parent[rootY] = rootX;
                rank[rootX]++;
            }
            else parent[rootY] = rootX;
            return true;
    }
};
class Solution {
public:
    int countComponents(int n, vector<vector<int>>& edges) {
        UnionFind uf(n);

        int components = n;
        for(auto edge:edges){
            if(uf.unite(edge[0], edge[1]))      components--;
        }
        return components;
    }
};
