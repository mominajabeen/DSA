/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root == nullptr)     return 0;

        int minTreeDepth = 0;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            int levelSize = q.size();
            minTreeDepth++;
            for(int i = 0; i < levelSize; i++){
                TreeNode* node = q.front();
                q.pop();
                // check if this is the leaf node
                if(!node->left && !node->right) return minTreeDepth;
                // if left and right child exist, push them in queue
                if(node->left)  q.push(node->left);
                if(node->right) q.push(node->right);
            }
        }    
        return minTreeDepth++;   
    }
};
