class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int, pair<int, int>>> maxHeap;

        for(auto& p:points){
            //  compute the dist from origion
            long dist = (pow(p[0], 2) + pow(p[1], 2));
            
            maxHeap.push({dist, {p[0], p[1]}});

            if(maxHeap.size() > k)  maxHeap.pop();
            
        }
        vector<vector<int>> res;
        while(!maxHeap.empty()){ 
            res.push_back({maxHeap.top().second.first, maxHeap.top().second.second});
            maxHeap.pop();
        }
        return res;
    }
};
