/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int averageOfSubtree(TreeNode* root) {
        int res = 0;
        if(root == nullptr){
            return res;
        }
        helper(root, res);
        return res;
    }
private:
    pair<int, int> helper(TreeNode* node, int& res){
        if(node == nullptr){
            return {0, 0};
        }
        pair<int, int> left_subTree = helper(node->left, res);
        pair<int, int> right_subTree = helper(node->right, res);

        int sum = left_subTree.first + right_subTree.first + node->val;
        int count = left_subTree.second + right_subTree.second + 1;
        int avg = sum/count;
        if(node->val == avg){
            res++;
        }
        return {sum, count};
    }
};
